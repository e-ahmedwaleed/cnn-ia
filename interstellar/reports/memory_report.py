import math
import reports.writer as w
import reports.constants as c

from reports.basic_report import intro_page


def build_table(pdf, table, pos, header):
    interval = int(len(table[0]) / 2)
    helper = int(len(header) / 2)
    pdf.cell(50, c.HEIGHT_MARGIN, "Exploration Table:", "B", 0, align="L")
    pdf.ln(c.MEDIUM_NEW_LINE)
    pdf.set_font('Arial', 'B', c.H3 - helper)
    margin = 190 / (2 * helper + 1)
    for head in header:
        pdf.cell(margin, c.HEIGHT_MARGIN, head, 0, 0, align="C")
    pdf.ln(c.SMALL_NEW_LINE)
    pdf.set_font('Arial', '', c.H3 - helper)
    # get min
    min_cost = math.inf
    for i in range(len(table)):
        for j in range(int(len(table[i]))):
            if min_cost > table[i][len(table[i]) - 1]:
                min_cost = float(table[i][len(table[i]) - 1])

    for i in range(len(table)):
        for j in range(int(len(table[i]) / 2)):
            if j not in pos:
                continue
            if min_cost == float(table[i][len(table[i]) - 1]):
                pdf.set_font('Arial', 'B', c.H3 - helper)
            pdf.cell(margin, c.HEIGHT_MARGIN, str(round(table[i][j], 2)), 0, 0, align="C")
            pdf.cell(margin, c.HEIGHT_MARGIN, str(round(table[i][j + interval], 2)), 0, 0, align="C")
            pdf.set_font('Arial', '', c.H3 - helper)
        if min_cost == float(table[i][len(table[i]) - 1]):
            pdf.set_font('Arial', 'B', c.H3 - helper)
        pdf.cell(margin, c.HEIGHT_MARGIN, str(round(table[i][len(table[i]) - 1], 2)), 0, 0, align="C")
        pdf.set_font('Arial', '', c.H3 - helper)
        pdf.ln(c.SMALL_NEW_LINE)
    pdf.ln(c.LARGE_NEW_LINE)


def generate(exploration_tb, pos, arch_info, network_info, output_file="memory_output.pdf"):
    title = "Analyzer Report {Memory Capacity}"
    body = "This report generated by Convolutional Neural Network Inference Analyzer (CNN-IA) " + \
           "to summarize the analysis needed to reach the optimal memory capacity by varying " + \
           "architecture parameters for " + network_info['layer_name'] + "."

    pdf = intro_page(title, body, arch_info)

    """ Memory Exploration """
    pdf.add_page()
    pdf.set_font('Arial', 'B', c.H1)

    ## Exploration parameters
    exploration_param = {'Scaling count': arch_info['explore_points'],
                         'Size scaling': arch_info['capacity_scale'],
                         'Cost scaling': arch_info['access_cost_scale']}

    pdf.cell(65, c.HEIGHT_MARGIN, "Exploration Parameters:", "B", 0, align="L")
    pdf.ln(c.MEDIUM_NEW_LINE)
    w.make_table(list(exploration_param.keys()), list(exploration_param.values()), pdf)
    pdf.ln(c.INTER_SMALL_NEW_LINE)

    ## Exploration Table
    pdf.set_font('Arial', 'B', c.H1)
    head = []
    # mem_levels = arch_info['mem_levels']
    for index in pos:
        head.append("L" + str(index) + "-SIZE")
        head.append("L" + str(index) + "-COST")
    head.append("TOTAL")
    build_table(pdf, exploration_tb, pos, head)

    pdf.output(output_file, 'F')
