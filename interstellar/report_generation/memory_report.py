import report_generation.constants as c
import report_generation.writer as w


def build_table(pdf, table, header):
    cache = int(len(header) / 2)
    pdf.cell(60, c.height_margin, "Exploration Table", 1, 0, align="C")
    pdf.ln(c.meduim_new_line)
    pdf.set_font('Arial', 'B', c.h3 - cache)
    margin = 30 - (2 * cache)
    for head in header:
        pdf.cell(margin, c.height_margin, head, 0, 0, align="C")
    pdf.ln(c.small_new_line)
    pdf.set_font('Arial', '', c.h3 - cache)
    for i in range(len(table)):
        for j in range(int(len(table[i]) / 2)):
            pdf.cell(margin, c.height_margin, str(float(table[i][j])), 0, 0, align="C")
            pdf.cell(margin, c.height_margin, str(float(table[i][j + cache])), 0, 0, align="C")
        pdf.cell(margin, c.height_margin, str(float(table[i][len(table[i]) - 1])), 0, 0, align="C")
        pdf.ln(c.small_new_line)
    pdf.ln(c.large_new_line)


def generate(exploration_tb, content, note, arch_info, network_info):
    pdf = w.PDF()
    pdf.alias_nb_pages()
    pdf.add_page()
    pdf.set_font('Arial', 'B', c.h1)
    # header of report
    """ Side Note: Name of Model """
    pdf.cell(0, 10, "Analyzer Report {Meomry Capcity}", 1, 0, 'C')
    pdf.ln(c.inter_mid_new_line)
    mem_levels = arch_info['mem_levels']
    """ Introduction """
    body = "This report generated by Convolutional Neural Network Inference Analyzer\n" + \
           "(CNN-IA) to summarize the analysis needed to reach the optimal memory capacity\n" + \
           "for " + network_info['layer_name'] + " using restricted schedule space."

    w.introduction(body, pdf)
    """
        Input Shape : The input from program
    """
    w.to_mem_arch(arch_info, pdf)

    """ Glossary"""

    """  
        explanation of memory caches and loops notations
    """

    w.glossary(mem_levels, pdf)
    pdf.ln(c.meduim_new_line)

    """
        Output 
    """
    pdf.add_page()
    head = []
    for index in range(0, mem_levels):
        head.append("L" + str(index) + "-SIZE")
        head.append("L" + str(index) + "-COST")
    head.append("TOTAL")
    build_table(pdf, exploration_tb, head)
    pdf.set_font('Arial', 'B', c.h1)
    pdf.cell(60, c.height_margin, "Optimal Cost", 1, 0, align="C")
    pdf.set_font('Arial', '', c.h4)
    pdf.cell(40, c.height_margin, "[ "+note+" ]", 0, 0, align="C")
    pdf.ln(c.meduim_new_line)
    content = content.replace("\t", "")
    content = content.replace("\n", "")
    x = content.split()
    margin = 40 - (2 * mem_levels)
    for index in range(0, len(x)):
        if index % (mem_levels + 1) == 0:
            pdf.ln(c.small_new_line)
        pdf.cell(margin, c.height_margin, x[index], 0, 0, align="L")

    pdf.output('report_generation/memory_output.pdf', 'F')
