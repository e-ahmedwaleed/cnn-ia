import report_generation.constants as c
import report_generation.writer as w


def print_tables(pdf, loop):
    names_of_loops = loop[2].para_loop_dim[0]
    pdf.set_font('Arial', 'B', c.h1)
    s = ""
    size = len(names_of_loops)
    for index in range(0, size):
        s = s + c.loops[names_of_loops[index][0]]
        if index != len(names_of_loops) - 1:
            s = s + ", "

    pdf.cell(15 * size, 10, s, 1, 0, 'C')
    cost_utlization = "[cost: " + str(loop[0]) + "pJ, utilization: " + str(loop[1]) + "%]"
    pdf.set_font('Arial', '', c.h4)
    pdf.cell(15 * size, 10)
    pdf.cell(20, 10, cost_utlization, 0, 0, 'C')
    pdf.ln(c.large_new_line)
    pdf.set_font('Arial', 'B', c.h1)

    # loop blocking

    pdf.cell(66, 10, "Loop Blocking (factors):", "B", 0, 'L')
    w.write_loops(loop[2].loop_blockings, pdf)

    # loop partitioning
    pdf.set_font('Arial', 'B', c.h1)
    pdf.cell(69, 10, "Loop Partitioning (units): ", "B", 0, 'L')
    w.write_loops(loop[2].loop_partitionings, pdf)

    # loop ordering
    pdf.set_font('Arial', 'B', c.h1)
    pdf.cell(100, 10, "Loop Ordering (from the innermost): ", "B", 0, 'L')
    w.write_loops(loop[2].loop_orders, pdf)


def write_optimality(pdf, loop_nest, dataflow_tb, title, best, hint=False):
    pdf.cell(60, 10, title, 1, 0, 'C')
    if hint:
        pdf.set_font('Arial', '', c.h4)
        pdf.cell(70, 10, "[b: blocking factor, p: partitioning unit]")
    pdf.ln(c.inter_mid_new_line)
    w.write_schedule(loop_nest(dataflow_tb[best][2]), pdf)
    pdf.ln(c.small_new_line)


def write_best_cost_utilization(loop_nest, dataflow_tb, pdf):
    best_cost = best_util = None
    for unrollment in dataflow_tb:
        if best_cost:
            if dataflow_tb[unrollment][0] < dataflow_tb[best_cost][0]:
                best_cost = unrollment
            if dataflow_tb[unrollment][1] > dataflow_tb[best_util][1]:
                best_util = unrollment
        else:
            best_cost = best_util = unrollment

    if best_cost != best_util:
        write_optimality(pdf, loop_nest, dataflow_tb, "Optimal cost", best_cost, True)
        write_optimality(pdf, loop_nest, dataflow_tb, "Optimal utilization", best_util)
    else:
        write_optimality(pdf, loop_nest, dataflow_tb, "Optimal schedule", best_util, True)


def generate(loop_nest, dataflow_tb, arch_info, network_info):
    pdf = w.PDF()
    pdf.alias_nb_pages()
    pdf.add_page()
    pdf.set_font('Arial', 'B', c.h1)
    # header of report
    """ Side Note: Name of Model """
    pdf.cell(0, 10, "Analyzer Report {Dataflow}", 1, 0, 'C')
    pdf.ln(c.inter_mid_new_line)
    mem_levels = arch_info['mem_levels']
    """ Introduction """
    body = "This report generated by Convolutional Neural Network Inference Analyzer\n" + \
           "(CNN-IA) to summarize the analysis needed to reach the optimal dataflow exploration\n" + \
           "for " + network_info['layer_name'] + " using restricted schedule space."

    w.introduction(body, pdf)
    """
        Input Shape : The input from program
    """
    w.to_mem_arch(arch_info, pdf)

    """ Glossary"""

    """  
        explanation of memory caches and layer parameters
    """

    w.glossary(mem_levels, pdf)
    pdf.ln(c.meduim_new_line)

    """
        Output 
    """
    pdf.add_page()
    for data in reversed(list(dataflow_tb.values())):
        print_tables(pdf, data)
        pdf.add_page()

    write_best_cost_utilization(loop_nest, dataflow_tb, pdf)

    pdf.output('report_generation/dataflow_output.pdf', 'F')
