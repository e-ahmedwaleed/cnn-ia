# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\Code\PyCharm\cnn-eia\qt-gui\phase-2-netron_loading\loading.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import sys
import netron
import threading

from PyQt5 import QtWebEngineWidgets, QtCore, QtGui, QtWidgets


# noinspection SpellCheckingInspection
class HiddenNetron(object):
    def __init__(self, main_window, model):
        main_window.setObjectName("MainWindow")
        main_window.resize(320, 60)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(main_window.sizePolicy().hasHeightForWidth())
        main_window.setSizePolicy(size_policy)
        main_window.setMinimumSize(QtCore.QSize(320, 60))
        main_window.setMaximumSize(QtCore.QSize(320, 60))
        icon = QtGui.QIcon()
        project_dir = __file__.replace("\\", "/").replace("/gui/export/netron_exporter.py", "")
        icon.addPixmap(QtGui.QPixmap(project_dir + "/imgs/netron-icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        main_window.setWindowIcon(icon)

        # Disable min/max/close buttons
        main_window.setWindowFlag(QtCore.Qt.WindowCloseButtonHint, False)
        main_window.setWindowFlag(QtCore.Qt.WindowMinimizeButtonHint, False)

        self.model = model
        self.output = model[:model.rfind('/')]
        # Intiate netron within a hidden browser
        # TODO: make sure to launch it first in the program gui for the user to accept cookies
        netron.start(self.model, browse=False)
        self.browser = QtWebEngineWidgets.QWebEngineView()
        self.browser.page().profile().downloadRequested.connect(self.on_download_requested)
        self.browser.setUrl(QtCore.QUrl("http://localhost:8080/"))
        self.browser.setVisible(False)

        self.centralwidget = QtWidgets.QWidget(main_window)
        self.centralwidget.setObjectName("centralwidget")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(10, 20, 300, 20))
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setProperty("value", 0)
        main_window.setCentralWidget(self.centralwidget)

        main_window.setWindowTitle("Exporting model graph")
        QtCore.QMetaObject.connectSlotsByName(main_window)

    def on_download_requested(self, download):
        download.setPath(self.output + "/model.png")
        download.accept()

    def increament_progress(self, step):
        if self.progressBar.value() < 100:
            self.progressBar.setProperty("value", self.progressBar.value() + step)

    def export_model(self, time_interval):
        # For some reason if the first time to invoke this method
        # is in another thread, the code simply fails
        self.browser.page().runJavaScript('', print)

        # Very nondeterministic manouver but 20 secs is quite enough
        # for the onnnx model to loaded to netron to be exported
        threading.Timer(time_interval * 2, function=self.browser.page().runJavaScript,
                        args=('this.__view__.export(document.title + ".png");',)).start()

        # An illousion of some progress
        step = int(100 / time_interval)
        import random
        for i in range(time_interval + 1):
            threading.Timer(i * 3, function=self.increament_progress,
                            args=(random.randint(max(0, step - 1), step + 1),)).start()
            threading.Timer(i * 3, function=QtCore.QCoreApplication.processEvents).start()

        return self.output


def terminate(model, output):
    # Delete the replica model since it can no longer be used
    if os.path.exists(output + "/model.png"):
        os.remove(model)
    # Stop the server at the local host by terminating netron
    netron.stop()


def main():
    model_path = str(sys.argv[1]).replace('*', ' ')
    time_interval = int(sys.argv[2])

    app = QtWidgets.QApplication(sys.argv)
    window = QtWidgets.QMainWindow()
    h_n = HiddenNetron(window, model_path)
    window.show()

    # Since this program is nondeterministic this is a timeout
    threading.Timer(time_interval * 3, function=terminate, args=(model_path, h_n.export_model(time_interval),)).start()
    # Has to be initiated in the main thread
    threading.Timer(time_interval * 4, function=app.quit).start()

    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
