# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\Code\Qt\cnn-eia\requiem.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets


# noinspection SpellCheckingInspection
class InterstellarGUI(object):
    def __init__(self, main_window, browser):
        main_window.resize(960, 640)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(main_window.sizePolicy().hasHeightForWidth())
        main_window.setSizePolicy(size_policy)
        main_window.setMinimumSize(QtCore.QSize(960, 640))
        main_window.setMaximumSize(QtCore.QSize(960, 640))
        icon = QtGui.QIcon()
        project_dir = __file__.replace("\\", "/").replace("/gui/requiem/interstellar_gui.py", "")
        icon.addPixmap(QtGui.QPixmap(project_dir + "/imgs/stand-arrow.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        main_window.setWindowIcon(icon)

        self.centralwidget = QtWidgets.QWidget(main_window)

        self.model_preview_group = QtWidgets.QGroupBox(self.centralwidget)
        self.model_preview_group.setGeometry(QtCore.QRect(10, 10, 321, 621))
        self.gridLayout = QtWidgets.QGridLayout(self.model_preview_group)
        self.gridLayout.addWidget(browser, 0, 0, 0, 0)

        browser.page().runJavaScript('this.__view__._updateZoom(0);')

        self.model_layer_group = QtWidgets.QGroupBox(self.centralwidget)
        self.model_layer_group.setGeometry(QtCore.QRect(340, 10, 451, 51))

        self.layer_type = QtWidgets.QComboBox(self.model_layer_group)
        self.layer_type.setGeometry(QtCore.QRect(70, 20, 121, 22))
        self.layer_type.addItem("")
        self.layer_type_label = QtWidgets.QLabel(self.model_layer_group)
        self.layer_type_label.setGeometry(QtCore.QRect(10, 20, 55, 21))

        self.layer_name = QtWidgets.QComboBox(self.model_layer_group)
        self.layer_name.setGeometry(QtCore.QRect(294, 20, 147, 22))
        self.layer_name.addItem("")
        self.layer_name_label = QtWidgets.QLabel(self.model_layer_group)
        self.layer_name_label.setGeometry(QtCore.QRect(230, 20, 59, 21))

        self.memory_arch_group = QtWidgets.QGroupBox(self.centralwidget)
        self.memory_arch_group.setGeometry(QtCore.QRect(340, 70, 611, 261))

        self.memory_arch_table = QtWidgets.QTableWidget(self.memory_arch_group)
        self.memory_arch_table.setGeometry(QtCore.QRect(10, 20, 591, 201))
        self.memory_arch_table.setColumnCount(6)
        self.memory_arch_table.setRowCount(4)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignVCenter)
        self.memory_arch_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignVCenter)
        self.memory_arch_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignVCenter)
        self.memory_arch_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignVCenter)
        self.memory_arch_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignVCenter)
        self.memory_arch_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignVCenter)
        self.memory_arch_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(0, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(0, 5, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(1, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(1, 5, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(2, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(2, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(2, 5, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(3, 3, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(3, 4, item)
        item = QtWidgets.QTableWidgetItem()
        self.memory_arch_table.setItem(3, 5, item)
        self.memory_arch_table.verticalHeader().setDefaultSectionSize(40)
        self.memory_arch_table.horizontalHeader().setDefaultSectionSize(83)
        self.memory_arch_table.horizontalHeader().setStretchLastSection(True)

        self.add_memory_level = QtWidgets.QPushButton(self.memory_arch_group)
        self.add_memory_level.setGeometry(QtCore.QRect(12, 22, 21, 21))

        self.remove_memory_level = QtWidgets.QPushButton(self.memory_arch_group)
        self.remove_memory_level.setGeometry(QtCore.QRect(32, 22, 21, 21))

        self.utilization_threshould = QtWidgets.QSpinBox(self.memory_arch_group)
        self.utilization_threshould.setGeometry(QtCore.QRect(105, 230, 51, 21))
        self.utilization_threshould.setMaximum(100)
        self.utilization_threshould.setAccelerated(True)
        self.utilization_threshould_label = QtWidgets.QLabel(self.memory_arch_group)
        self.utilization_threshould_label.setGeometry(QtCore.QRect(10, 230, 91, 21))

        self.parallel_cost = QtWidgets.QLineEdit(self.memory_arch_group)
        self.parallel_cost.setGeometry(QtCore.QRect(314, 230, 51, 21))
        self.parallel_cost_label = QtWidgets.QLabel(self.memory_arch_group)
        self.parallel_cost_label.setGeometry(QtCore.QRect(190, 230, 121, 21))

        self.replication = QtWidgets.QCheckBox(self.memory_arch_group)
        self.replication.setGeometry(QtCore.QRect(440, 230, 71, 21))

        self.mac_capacity = QtWidgets.QCheckBox(self.memory_arch_group)
        self.mac_capacity.setGeometry(QtCore.QRect(520, 230, 81, 21))

        self.output_queue_group = QtWidgets.QGroupBox(self.centralwidget)
        self.output_queue_group.setGeometry(QtCore.QRect(340, 340, 611, 291))

        self.output_queue_table = QtWidgets.QTableWidget(self.output_queue_group)
        self.output_queue_table.setGeometry(QtCore.QRect(10, 50, 591, 231))
        self.output_queue_table.setColumnCount(3)
        self.output_queue_table.setRowCount(6)
        item = QtWidgets.QTableWidgetItem()
        self.output_queue_table.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.output_queue_table.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.output_queue_table.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.output_queue_table.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.output_queue_table.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.output_queue_table.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignVCenter)
        self.output_queue_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignVCenter)
        self.output_queue_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignVCenter)
        self.output_queue_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.output_queue_table.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.output_queue_table.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.output_queue_table.setItem(0, 2, item)
        self.output_queue_table.horizontalHeader().setDefaultSectionSize(98)
        self.output_queue_table.horizontalHeader().setStretchLastSection(True)
        self.output_queue_table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)

        self.thread_limit_label = QtWidgets.QLabel(self.output_queue_group)
        self.thread_limit_label.setGeometry(QtCore.QRect(10, 20, 121, 21))

        self.thread_limit = QtWidgets.QSpinBox(self.output_queue_group)
        self.thread_limit.setGeometry(QtCore.QRect(130, 20, 91, 21))
        self.thread_limit.setMinimum(1)
        self.thread_limit.setMaximum(100)
        self.thread_limit.setAccelerated(True)

        self.clear_output_queue = QtWidgets.QPushButton(self.output_queue_group)
        self.clear_output_queue.setGeometry(QtCore.QRect(540, 20, 61, 21))
        self.clear_output_queue.clicked.connect(self.output_queue_table.clearContents)

        self.add_to_output_queue = QtWidgets.QPushButton(self.centralwidget)
        self.add_to_output_queue.setGeometry(QtCore.QRect(800, 20, 31, 41))
        self.add_to_output_queue.setMaximumSize(QtCore.QSize(16777215, 16777213))
        self.add_to_output_queue.setToolTipDuration(-1)
        self.add_to_output_queue.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(project_dir + "/imgs/queue.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.add_to_output_queue.setIcon(icon)

        self.run_output_queue = QtWidgets.QPushButton(self.centralwidget)
        self.run_output_queue.setGeometry(QtCore.QRect(840, 20, 111, 41))
        self.run_output_queue.setToolTip("")

        main_window.setCentralWidget(self.centralwidget)

        self.set_text(main_window)
        QtCore.QMetaObject.connectSlotsByName(main_window)

        main_window.show()

    def set_text(self, main_window):
        main_window.setWindowTitle("Inference Analyzer")
        self.model_preview_group.setTitle("Model Preview")
        self.model_layer_group.setTitle("Model Layer")
        self.layer_type.setToolTip("Supported layer type")
        self.layer_type.setItemText(0, "Conv")
        self.layer_name.setToolTip("Extracted layer file")
        self.layer_name.setItemText(0, "9999_Conv")
        self.layer_type_label.setText("Layer type:")
        self.layer_name_label.setText("Layer name:")
        self.memory_arch_group.setTitle("Memory Architecture")
        item = self.memory_arch_table.verticalHeaderItem(0)
        item.setText("Memory L0")
        item = self.memory_arch_table.verticalHeaderItem(1)
        item.setText("Memory L1")
        item = self.memory_arch_table.verticalHeaderItem(2)
        item.setText("Memory L2")
        item = self.memory_arch_table.verticalHeaderItem(3)
        item.setText("Memory L3")
        item = self.memory_arch_table.horizontalHeaderItem(0)
        item.setText("Capacity")
        item.setToolTip("Memory capacity in bytes")
        item = self.memory_arch_table.horizontalHeaderItem(1)
        item.setText("Access cost")
        item.setToolTip("Cost per access")
        item = self.memory_arch_table.horizontalHeaderItem(2)
        item.setText("Static cost")
        item.setToolTip("Cost per time unit")
        item = self.memory_arch_table.horizontalHeaderItem(3)
        item.setText("Parallel count")
        item.setToolTip("Number of parallel processing elements")
        item = self.memory_arch_table.horizontalHeaderItem(4)
        item.setText("Parallel dim")
        item.setToolTip("Layout dimension (1D & square-2D)")
        item = self.memory_arch_table.horizontalHeaderItem(5)
        item.setText("Parallel mode")
        item.setToolTip("Hardware parallel template (hierarchical & neighbour & broadcast)")
        item = self.memory_arch_table.item(0, 0)
        item.setText("1")
        item = self.memory_arch_table.item(0, 1)
        item.setText("0.0")
        item = self.memory_arch_table.item(0, 2)
        item.setText("0.0")
        item = self.memory_arch_table.item(0, 3)
        item.setText("1")
        item = self.memory_arch_table.item(0, 4)
        item.setText("1D")
        item = self.memory_arch_table.item(0, 5)
        item.setText("hierarchical")
        item = self.memory_arch_table.item(1, 0)
        item.setText("1024")
        item = self.memory_arch_table.item(1, 1)
        item.setText("0.0")
        item = self.memory_arch_table.item(1, 2)
        item.setText("0.0")
        item = self.memory_arch_table.item(1, 3)
        item.setText("1")
        item = self.memory_arch_table.item(1, 4)
        item.setText("1D")
        item = self.memory_arch_table.item(1, 5)
        item.setText("hierarchical")
        item = self.memory_arch_table.item(2, 0)
        item.setText("1048476")
        item = self.memory_arch_table.item(2, 1)
        item.setText("0.0")
        item = self.memory_arch_table.item(2, 2)
        item.setText("0.0")
        item = self.memory_arch_table.item(2, 3)
        item.setText("1")
        item = self.memory_arch_table.item(2, 4)
        item.setText("1D")
        item = self.memory_arch_table.item(2, 5)
        item.setText("hierarchical")
        item = self.memory_arch_table.item(3, 0)
        item.setText("1073741824")
        item = self.memory_arch_table.item(3, 1)
        item.setText("0.0")
        item = self.memory_arch_table.item(3, 2)
        item.setText("0.0")
        item = self.memory_arch_table.item(3, 3)
        item.setText("1")
        item = self.memory_arch_table.item(3, 4)
        item.setText("1D")
        item = self.memory_arch_table.item(3, 5)
        item.setText("hierarchical")
        self.mac_capacity.setToolTip("Determines whether MAC can buffer 1 output")
        self.mac_capacity.setText("MAC buffer")
        self.parallel_cost_label.setText("Intercommunication cost:")
        self.utilization_threshould_label.setText("Minimum utilization:")
        self.replication.setToolTip(
            "Allow another loop dimension (3rd) to be spatially unrolled")
        self.replication.setText("Replication")
        self.add_memory_level.setToolTip("Add memory level")
        self.add_memory_level.setText("+")
        self.remove_memory_level.setToolTip("Remove memory level")
        self.remove_memory_level.setText("-")
        self.parallel_cost.setToolTip(
            "Per access cost of fetching data from neighborhood processing elements (parallel cost)")
        self.parallel_cost.setText("0.0")
        self.utilization_threshould.setToolTip(
            "At paralleled level: utilized units / total units")
        self.utilization_threshould.setSuffix("%")
        self.run_output_queue.setText("Run Optimizer")
        self.output_queue_group.setTitle("Output Queue")
        item = self.output_queue_table.verticalHeaderItem(0)
        item.setText("0")
        item = self.output_queue_table.verticalHeaderItem(1)
        item.setText("1")
        item = self.output_queue_table.verticalHeaderItem(2)
        item.setText("2")
        item = self.output_queue_table.verticalHeaderItem(3)
        item.setText("3")
        item = self.output_queue_table.verticalHeaderItem(4)
        item.setText("5")
        item = self.output_queue_table.verticalHeaderItem(5)
        item.setText("6")
        item = self.output_queue_table.horizontalHeaderItem(0)
        item.setText("Layer name")
        item = self.output_queue_table.horizontalHeaderItem(1)
        item.setText("Status")
        item = self.output_queue_table.horizontalHeaderItem(2)
        item.setText("Output")
        item = self.output_queue_table.item(0, 0)
        item.setText("9999_Conv")
        item = self.output_queue_table.item(0, 1)
        item.setText("Done")
        item = self.output_queue_table.item(0, 2)
        item.setText("D:\\Code\\PyCharm\\cnn-eia\\output\\9999_Conv.pdf")
        self.thread_limit_label.setText("Maximum thread count:")
        self.thread_limit.setToolTip("Limit number of threads to be executed concurrently")
        self.thread_limit.setSuffix(" Thread(s)")
        self.clear_output_queue.setToolTip("Clear output queue")
        self.clear_output_queue.setText("Clear")
        self.add_to_output_queue.setToolTip("Add current layer to the queue")
